#include <bits/stdc++.h>
using namespace std;
/**
 * 구현을 하라는 것은 하라는 대로 하면 된다.
 * 차근차근 주석을 달고 구현하면 쉽게 할 수 있다.
*/

int main () {
  // 1. 앞에서 부터 3개의 문자열을 출력하라
  // 2. 해당 문자열을 거꾸로 해서 출력하라
  // 3. 해당 문자열 끝에 umzunsik이란 문자열을 추가해라

  string dopa = "umzunsik";

  // 3개 출력
  for(int i = 0 ; i < 3; i++) {
    cout << dopa[i];
  }

  // substr
  cout << dopa.substr(0, 3) << '\n';

  // 거꾸로 출력
  reverse(dopa.begin(), dopa.end());
  cout << dopa << '\n';
  // 엄준식 추가 출력
  cout << dopa + " umzunsik" << '\n';
}

/**
 * 1. 문제를 본다.
 * 2. 문제를 해석한다.
 * 3. 코드를 작성한다. <- 코드를 바로 작성하지 말자
 * 무조건 문제를 더 보고 지문을 통해 최대, 최소 범위 + 지문 등등을 통해 해석하고
 * 코드를 짠다.
*/

/**
 * 문제의 최소 최대 범위를 파악한다.
 * 단순 구현이면 구현한다,
 * 무식하게 풀수 있으면 무식하게 푼다.
 * 문제를 풀다가 안되면(brute-force -> greedy, DP, 최단거리) 효율을 만든다.
 * 제출 전에 반례를 한번쯤은 항상 생각하자
 * 내부 TC는 다르다! 외부 TC를 맞는다고 내부 TC를 맞을 확률이 100프로가 아니다
 * 반례가 있는 지 체크하는 습관을 꼭 들이자.
*/